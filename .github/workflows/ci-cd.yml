name: CI/CD

on:
  push:
    branches: 
      - main
    paths:
      - '!.github/**'

permissions:
  contents: read

jobs:
  CI-CD:

    runs-on: ubuntu-latest

    steps:
    
    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    ## create application.yml
    - name: make application.yml
      run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YAML_PROD }}" > ./application-prod.yml
          cd ../../..
          cd ./src/test/resources
          touch ./application.yml
          echo "${{ secrets.YAML_TEST }}" > ./application.yml

    ## gradle build        
    - name: Build with Gradle
      uses: gradle/gradle-build-action@main
      with:
        arguments: build
#       run: ./gradlew build
        
    # docker build & push to production
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push
      run: |
            docker build --platform linux/arm64/v8 -t ${{ secrets.DOCKER_REPO }} .
            docker push ${{ secrets.DOCKER_REPO }}
#       uses: docker/build-push-action@v3
#       with:
#         push: true
#         tags: ${{ secrets.DOCKER_REPO }}:latest
#         platforms: linux/arm64/v8
        
    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
            sudo docker stop item-manager-be
            sudo docker rm item-manager-be
            sudo docker run -d \
            --pull=always \
            --add-host=host.docker.internal:host-gateway \
            -v /home/${{ secrets.SERVER_USERNAME }}/app/item/log:/var/log \
            -v /home/${{ secrets.SERVER_USERNAME }}/app/item/image:/image \
            -p 8080:8080 \
            --name item-manager-be \
            ${{ secrets.DOCKER_REPO }}
            
  ## discord
  report-result:
    needs: CI-CD
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification
        uses: sarisia/actions-status-discord@v1.12.0
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ needs.CI-CD.result }}
