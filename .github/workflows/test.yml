name: Java TEST with Gradle

on:
#   push:
#     branches:
#       - 'feature/**'
  pull_request:
    branches: 
      - main
      - 'v**'
      - 'feature/**'
#     paths: 
#       - '**/java/**'

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - uses: actions/cache@v3
      with:
        path: |  
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
#     - name: Build with Gradle
#       uses: gradle/gradle-build-action@main
#       id: gradle
#       with:
#         arguments: build
#         cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/feature/**' }}
    - name: Test with Gradle
      uses: gradle/gradle-build-action@main
      with:
        arguments: test
        
    - name: 테스트 결과를 PR에 코멘트로 등록합니다
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: '**/build/test-results/test/TEST-*.xml'

#     - name: 테스트 실패 시, 실패한 코드 라인에 Check 코멘트를 등록합니다
#       uses: mikepenz/action-junit-report@v3
#       if: always()
#       with:
#         report_paths: '**/build/test-results/test/TEST-*.xml'
    
  ## discord
  action-discord:
    if: ${{ always() }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification
        uses: sarisia/actions-status-discord@v1.12.0
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: ${{ steps.gradle.outputs }}
